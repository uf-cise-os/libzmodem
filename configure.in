dnl Process this file with autoconf to produce a configure script.
AC_INIT(crctab.c)
AC_CONFIG_HEADER(config.h)

test $prefix = NONE && prefix=/usr

AC_CANONICAL_HOST
AC_SUBST(host_os)
AC_SUBST(host_cpu)


AC_ARG_ENABLE(timesync,
	[--disable-timesync   exclude support for timesync protocol],
	[ENABLE_TIMESYNC=-DENABLE_TIMESYNC ; if test "$withval" = "no" ; then 
		ENABLE_TIMESYNC= ; fi],
	[ENABLE_TIMESYNC=-DENABLE_TIMESYNC])
AC_SUBST(ENABLE_TIMESYNC)
AC_ARG_ENABLE(pubdir,
	[--enable-pubdir=/path   include support for a public writeable directory],
	[PUBDIR="$withval" ; if test "$withval" = "no" ; then 
		PUDIR= ; fi],
	[PUBDIR=])
AC_SUBST(PUBDIR)
AC_ARG_ENABLE(mkdir,
	[--disable-mkdir   disable support for creating directories (lrz)],
	[ENABLE_MKDIR=-DENABLE_MKDIR ; if test "$withval" = "no" ; then 
		ENABLE_MKDIR= ; fi],
	[ENABLE_MKDIR=-DENABLE_MKDIR])
AC_SUBST(ENABLE_MKDIR)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_C_CROSS

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h sys/ioctl.h sys/time.h unistd.h sys/times.h)
AC_CHECK_HEADERS(termio.h sys/termio.h sgtty.h)
AC_CHECK_HEADERS(sys/mman.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_STRUCT_ST_RDEV
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
if test $cross_compiling = no ; then
	AC_FUNC_SETVBUF_REVERSED
fi
AC_TYPE_SIGNAL
AC_FUNC_UTIME_NULL
AC_FUNC_MMAP
AC_CHECK_FUNCS(gettimeofday settimeofday strftime)
AC_CHECK_FUNCS(strchr memcpy)
AC_CHECK_FUNCS(times)
AC_REPLACE_FUNCS(mkdir strerror strstr)


dnl special tests

dnl this is taken from taylor uucp.
dnl Check for the SCO buggy ftime; the code can cope with the bug,
dnl though it would prefer not to, so if we're cross-configuring we
dnl accept that ftime exists.
AC_CHECK_FUNC(ftime,
[AC_MSG_CHECKING(that ftime works correctly)
AC_CACHE_VAL(lrzsz_cv_sys_ftime_ok,
[AC_TRY_RUN([
#include <sys/types.h>
#include <sys/timeb.h>
#include <stdio.h>
main ()
{
  struct timeb s, slast;
  int c = 0;
  ftime (&slast);
  while (c < 10)
    {
      ftime (&s);
      if (s.time < slast.time
      || (s.time == slast.time && s.millitm < slast.millitm)) {
      fprintf(stderr,"s: %ld, %ld, slast: %ld, %ld\n",
      	s.time,s.millitm, slast.time,slast.millitm);
    exit (1);
	}
      if (s.time != slast.time)
    ++c;
      slast.time = s.time;
      slast.millitm = s.millitm;
    }
  exit (0);
}
],
lrzsz_cv_sys_ftime_ok=yes,
lrzsz_cv_sys_ftime_ok=no,
lrzsz_cv_sys_ftime_ok=runtime)])
case $lrzsz_cv_sys_ftime_ok in
yes) AC_DEFINE(HAVE_FTIME) AC_MSG_RESULT(yes) ;;
no)  AC_MSG_RESULT(no)
	AC_MSG_WARN(ftime seems to be buggy) ;;
runtime) AC_DEFINE(HAVE_FTIME)
	AC_MSG_RESULT(will check at run time) ;;
esac
])

dnl
AC_MSG_CHECKING([for timezone])
AC_CACHE_VAL(libquark_cv_var_timezone,[
AC_TRY_LINK([#include <time.h>],[return(int)(timezone/2);],
	[libquark_cv_var_timezone=yes],
	[libquark_cv_var_timezone=no])
])
if test $libquark_cv_var_timezone = yes ; then
	AC_MSG_RESULT(yes)
	AC_DEFINE(HAVE_TIMEZONE_VAR)
else
	AC_MSG_RESULT(no)
fi

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(LIBS)

AC_OUTPUT(Makefile)
